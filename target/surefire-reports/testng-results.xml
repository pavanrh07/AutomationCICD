<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="5" passed="4" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-02-09T18:39:55 IST" name="Suite" finished-at="2024-02-09T18:40:46 IST" duration-ms="50487">
    <groups>
      <group name="Purchase">
        <method signature="SubmitOrderTest.submitOrder(java.util.HashMap)[pri:0, instance:learning.SubmitOrderTest@484094a5]" name="submitOrder" class="learning.SubmitOrderTest"/>
      </group> <!-- Purchase -->
      <group name="Error Handling">
        <method signature="ErrorValidationTest.loginErrorValidation()[pri:0, instance:learning.ErrorValidationTest@561868a0]" name="loginErrorValidation" class="learning.ErrorValidationTest"/>
      </group> <!-- Error Handling -->
    </groups>
    <test started-at="2024-02-09T18:39:55 IST" name="Error Validation Test" finished-at="2024-02-09T18:40:33 IST" duration-ms="38152">
      <class name="learning.ErrorValidationTest">
        <test-method is-config="true" signature="launchApplication()[pri:0, instance:learning.ErrorValidationTest@561868a0]" started-at="2024-02-09T18:39:55 IST" name="launchApplication" finished-at="2024-02-09T18:40:05 IST" duration-ms="9338" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApplication -->
        <test-method signature="loginErrorValidation()[pri:0, instance:learning.ErrorValidationTest@561868a0]" started-at="2024-02-09T18:40:05 IST" name="loginErrorValidation" finished-at="2024-02-09T18:40:07 IST" duration-ms="2719" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Incorrect email or password.] but found [Incorrect email r password.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Incorrect email or password.] but found [Incorrect email r password.]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at learning.ErrorValidationTest.loginErrorValidation(ErrorValidationTest.java:34)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:228)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:961)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:201)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:819)
at org.testng.TestRunner.run(TestRunner.java:619)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:481)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:58)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
at java.base/java.lang.Thread.run(Thread.java:834)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginErrorValidation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:learning.ErrorValidationTest@561868a0]" started-at="2024-02-09T18:40:09 IST" name="tearDown" finished-at="2024-02-09T18:40:09 IST" duration-ms="406" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="launchApplication()[pri:0, instance:learning.ErrorValidationTest@561868a0]" started-at="2024-02-09T18:40:09 IST" name="launchApplication" finished-at="2024-02-09T18:40:17 IST" duration-ms="7658" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApplication -->
        <test-method signature="productErrorValidation()[pri:0, instance:learning.ErrorValidationTest@561868a0]" started-at="2024-02-09T18:40:17 IST" name="productErrorValidation" finished-at="2024-02-09T18:40:33 IST" duration-ms="16229" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- productErrorValidation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:learning.ErrorValidationTest@561868a0]" started-at="2024-02-09T18:40:33 IST" name="tearDown" finished-at="2024-02-09T18:40:33 IST" duration-ms="427" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- learning.ErrorValidationTest -->
    </test> <!-- Error Validation Test -->
    <test started-at="2024-02-09T18:39:55 IST" name="Submit Order test" finished-at="2024-02-09T18:40:46 IST" duration-ms="50487">
      <class name="learning.SubmitOrderTest">
        <test-method is-config="true" signature="launchApplication()[pri:0, instance:learning.SubmitOrderTest@484094a5]" started-at="2024-02-09T18:39:55 IST" name="launchApplication" finished-at="2024-02-09T18:40:05 IST" duration-ms="9487" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApplication -->
        <test-method signature="submitOrder(java.util.HashMap)[pri:0, instance:learning.SubmitOrderTest@484094a5]" started-at="2024-02-09T18:40:05 IST" name="submitOrder" data-provider="getDat" finished-at="2024-02-09T18:40:14 IST" duration-ms="9016" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{password=Password@123, email=pavankumar.h@gmail.com, productName=ADIDAS ORIGINAL}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- submitOrder -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:learning.SubmitOrderTest@484094a5]" started-at="2024-02-09T18:40:14 IST" name="tearDown" finished-at="2024-02-09T18:40:16 IST" duration-ms="2028" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="launchApplication()[pri:0, instance:learning.SubmitOrderTest@484094a5]" started-at="2024-02-09T18:40:16 IST" name="launchApplication" finished-at="2024-02-09T18:40:22 IST" duration-ms="5978" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApplication -->
        <test-method signature="submitOrder(java.util.HashMap)[pri:0, instance:learning.SubmitOrderTest@484094a5]" started-at="2024-02-09T18:40:22 IST" name="submitOrder" data-provider="getDat" finished-at="2024-02-09T18:40:38 IST" duration-ms="16573" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{password=Password@123, email=pavan.h@gmail.com, productName=IPHONE 13 PRO}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- submitOrder -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:learning.SubmitOrderTest@484094a5]" started-at="2024-02-09T18:40:38 IST" name="tearDown" finished-at="2024-02-09T18:40:39 IST" duration-ms="609" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="launchApplication()[pri:0, instance:learning.SubmitOrderTest@484094a5]" started-at="2024-02-09T18:40:39 IST" name="launchApplication" finished-at="2024-02-09T18:40:43 IST" duration-ms="3899" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApplication -->
        <test-method signature="orderHistoryTest()[pri:0, instance:learning.SubmitOrderTest@484094a5]" started-at="2024-02-09T18:40:43 IST" name="orderHistoryTest" finished-at="2024-02-09T18:40:45 IST" depends-on-methods="learning.SubmitOrderTest.submitOrder" duration-ms="2086" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- orderHistoryTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:learning.SubmitOrderTest@484094a5]" started-at="2024-02-09T18:40:45 IST" name="tearDown" finished-at="2024-02-09T18:40:46 IST" duration-ms="614" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- learning.SubmitOrderTest -->
    </test> <!-- Submit Order test -->
  </suite> <!-- Suite -->
</testng-results>
